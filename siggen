#!/bin/sh

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2021 Jeremy Brubaker <јЬruЬаkе@оrіоnаrtѕ.іо>
#
# siggen - Generate an email/Usenet signature from a template file.
#     Optionally add a fortune cookie at the end
#
# Documentation {{{1
#
VERSION='1.0'
PROGNAME=$(basename $0)

print_help() {
    cat <<EOF
Usage: $PROGNAME [option]
Generate a standard email/Usenet signature from a template file
 
 -q            do not prepend signature with "-- \\n"
 -f FILE       use FILE instead of ~/.signature
 -c [file]     add a fortune cookie at the end, using [file] as
                the cookie file if provided. Requires fortune(6)
 -v            display version info and exit
 -h            display this help and exit
EOF
}

print_version() {
    cat <<EOF
$PROGNAME $VERSION
Copyright (C) 2021 Orion Arts
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Jeremy Brubaker.
EOF
}

# Process options {{{1
#
sigfile="$HOME/.signature"
cookie_file=

while getopts 'qf:cvh' opt; do
    case $opt in
        q) print_leader="n";;
        f) sigfile="$OPTARG";;
        c)  # an ugly way to provide an optional arg
            # to -c without using bash
            print_cookie="y"
            next=$(eval "echo \"\$$OPTIND\"")
            if [ "$(echo "$next" | cut -c1-1)" != "-" ]; then
                cookie_file=$next
                OPTIND=$((OPTIND+1))
            fi
            ;;
        v) print_version; exit ;;
        h|?) print_help; exit ;;
    esac
done

# Generate signature {{{1
#
test "$print_leader" != "n" && printf "%s\n" "-- "

if [ -r "$sigfile" ]; then
    cat "$sigfile"
else
    printf "%s\n" "$sigfile does not exist" >&2
fi

if [ "$print_cookie" == "y" ]; then
    printf "%s\n" ""
    fortune-oneline -f "$cookie_file"
fi

