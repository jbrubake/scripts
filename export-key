#!/bin/sh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2024 Jeremy Brubaker <jbru362@gmail.com>
#
# abstract: export and import gpg keys
#
# Defaults {{{1
#
DFLT_KEYDIR=.

PUB=out.pub.asc
PRIV=out.priv.asc
SUBPRIV=out.sub_priv.asc
TRUST=out.ownertrust.txt

# Documentation {{{1
#
VERSION='1.0'

print_help() (
    [ -n "$2" ] && printf "%s\n" "$2"
    case $1 in
        */export) # {{{
            cat <<END
Usage: $0 [options] KEYID BASENAME

Export KEYID to BASENAME.gpg.tar.enc

Options:
  -l        list GPG secret keys
  -d [DIR]  save exported key to DIR
  -h        display this help and exit
  -v        output version information and exit
END
            ;; # }}}
        */import) # {{{
            cat <<END
Usage: $0 [options] ARCHIVE

Import the keypair contained in ARCHIVE

Options:
  -h        display this help and exit
  -v        output version information and exit
END
            ;; # }}}
        *) # {{{
            printf '%s\n' 'How did we get here?'
            exit 1
        ;; # }}}
    esac
) >&2

print_version() (
    cat <<END
$0 $VERSION
Copyright (C) 2024
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Jeremy Brubaker.
END
) >&2

# Functions {{{1
#
list_keys() { gpg --list-secret-keys; }
mkdtemp() {
    while
        dir=$(echo 'mkstemp(template)' | m4 -D template="$1XXXXXX")
        rm -f -- "$dir"
        ! mkdir "$dir"
    do : ; done
    printf '%s\n' "$dir"
}

export_key() {
    id="$1"
    out="$2"

    dir=$(mkdtemp "${TMPDIR:-/tmp}/")
    trap 'rm -f "$dir"/*; rmdir "$dir"; trap - EXIT; exit' EXIT INT HUP TERM
    chmod 700 "$dir"

    gpg --export                --armor "$id" > "$dir/$PUB"
    gpg --export-secret-keys    --armor "$id" > "$dir/$PRIV"
    gpg --export-secret-subkeys --armor "$id" > "$dir/$SUBPRIV"
    gpg --export-ownertrust                   > "$dir/$TRUST"

    tar c -C "$dir" . | openssl enc -aes-256-cbc -pbkdf2 > "$KEYDIR/$out.gpg.tar.enc" 
}

import_key() {
    archive="$1"

    dir=$(mkdtemp "${TMPDIR:-/tmp}/")
    trap 'rm -f "$dir"/*; rmdir "$dir"; trap - EXIT; exit' EXIT INT HUP TERM
    chmod 700 "$dir"

    openssl enc -aes-256-cbc -pbkdf2 -d -in "$archive" |
        tar x -C "$dir"

    gpg --import            "$dir/$PUB"
    gpg --import            "$dir/$PRIV"
    gpg --import            "$dir/$SUBPRIV"
    gpg --import-ownertrust "$dir/$TRUST"

    id=$(gpg --with-colons --import-options show-only --import --fingerprint \
        < "$dir/out.pub.asc" | awk -F: '$1 == "fpr" {print $10}' | head -1)

    cat <<END

Run the following commands and enter '5' to ultimately trust the imported key:

$ gpg --edit-key "$id"
gpg> trust
...
  5 = I trust ultimately
  m = back to the main menu

Your decision?

END
}
# Main {{{1
#
case $0 in
    */import)
        while getopts ':hv' c; do
            case $c in
                v) print_version; exit 0 ;;
                h) print_help "$0"; exit 0 ;;
                ?) print_help "" "Invalid option: -$OPTARG";  exit 1 ;;
            esac
        done
        shift $((OPTIND-1))

        case $# in
            1) archive=$1; shift ;;
            *) print_help 'import' ''; exit 1 ;;
        esac

        import_key "$archive"
        ;;
    */export)
        KEYDIR=$DFLT_KEYDIR
        while getopts ':ld:hv' c; do
            case $c in
                l) list_keys; exit 0 ;;
                d) KEYDIR=$OPTARG; mkdir -p "$KEYDIR" ;;
                v) print_version; exit 0 ;;
                h) print_help "$0"; exit 0 ;;
                ?) print_help "" "Invalid option: -$OPTARG";  exit 1 ;;
            esac
        done
        shift $((OPTIND-1))

        case $# in
            2) id=$1; out=$2; shift 2 ;;
            *) printf 'Usage: %s export KEYID OUTPUTNAME\n' "$0"; exit 1 ;;
        esac

        export_key "$id" "$out"
        ;;
    *)
        printf 'Unknown command: %s\n' "$0" >&2
        exit 1
        ;;
esac

