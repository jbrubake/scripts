#!/bin/bash
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2021 Jeremy Brubaker <jbru362@gmail.com>
#
# abstract: use dmenu as a run dialog
#
# Requires 'my terimnal' to print terminal command
#
# shellcheck disable=SC1090
source "$LIBSH"

@import dmenu
@import stdio
@import stdlib

set -u

stdlib::have my || stdio::die 1 "'my' not found"

term_cmd=$(my -v terminal)

aliasfile="$HOME/.alias"
functionfile="$HOME/.functions"

cachedir="${XDG_CACHE_HOME:-"$HOME/.cache"}/dmenu"
if ! [ -d "$cachedir" ]; then
    mkdir -p "$cachedir"
fi
cachefile="$cachedir/run"

# Instead of making this an interactive script, just
# source the files we need
test -r "$aliasfile"    && source "$aliasfile"
test -r "$functionfile" && source "$functionfile"

(compgen -a; compgen -c | grep -vxF -- "$(compgen -a)") \
    | sort | grep -v "^[[:punct:]]" | uniq > "$cachefile"

# Cannot quote dmenu args
# shellcheck disable=SC2046
cmdline=$(dmenu $(make_dmenu_args) "$@" < "$cachefile")
[ -z "$cmdline" ] && exit
cmd=$(echo "$cmdline" | cut -d' ' -f1)
[ -z "$cmd" ] && exit

if grep "${cmd/;/}" "$cachefile" >/dev/null 2>&1; then
    # Trailing ';' means run it in a terminal
    case "$cmdline" in
        *\;)
            $term_cmd -- bash -ic "
            __t=\$(date +%s)
            $cmdline
            test \$((\$(date +%s) - __t)) -lt 1 &&
                read -srn1 -p 'Press any key...'
                            "
            ;;
        *)
            (eval "$cmdline &")
            ;;
    esac
else
    exec "$0" "$@" -p "${cmd/;/} not found:"  < "$cachefile"
fi

