#!/usr/bin/python
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2014 Jeremy Brubaker <jbru362@gmail.com>
#
# abstract: upload .plan and .project to finger.farm
#

import argparse
import os.path
import requests
import sys
import time

VERBOSE = False
VERSION = "1.0.0"
OKCODE  = 200

def parse_cli():

    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose", help="explain what is being done", action="store_true")
    parser.add_argument("-V", "--version", help="output version information and exit", action="store_true")
    args = parser.parse_args()

    if args.version:
        print(f"""\
{os.path.basename(__file__)} {VERSION}
Copyright (C) 2022 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later
<https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Jeremy Brubaker <jbrubake@orionarts.io>.""")
        sys.exit(0)

    if args.verbose:
        global VERBOSE
        VERBOSE = True


def getcachetime(f):
    """ Return the cached last-run time or None if not found"""

    cache_time = None
    try:
        cache_time = os.path.getmtime(cache_file)
    except:
        print(f"{cache_file} not found", file=sys.stderr)

    return cache_time


def gettoken(f):
    """ Read the finger.farm token from a file"""

    try:
        with open(token_file, "r") as tk:
            token = tk.read()
            token = token.strip()
    except:
        token = None

    return token


def upload_file(f, which):
    """ Upload a file to finger.farm """

    if cache_time is None or os.path.getmtime(f) > cache_time:
        if VERBOSE:
            print(f"Uploading {f}")
        with open(f, "r") as p:
            data = p.read()
        req = {'token': token, 'data': data}
        r = requests.put(f"https://finger.farm/api/jbrubake/{which}", data=req)
        return r.status_code
    else:
        if VERBOSE:
            print(f"Remote copy of {f} is up to date. Skipping")
        return OKCODE


def updatecachetime(f):
    """ Update the last-run time cache, creating the file if necessary """

    if not cache_time:
        if VERBOSE:
            print(f"Creating {cache_file}")
        os.makedirs(os.path.expanduser("~/var/cache"), exist_ok=True)
        open(cache_file, 'w').close()
    else:
        if VERBOSE:
            print(f"Updating {cache_file} mtime")
        os.utime(cache_file)

if __name__ == "__main__":
    cache_file   = os.path.expanduser("~/var/cache/finger.farm")
    token_file   = os.path.expanduser("~/.fingerfarm.token")

    files = [(os.path.expanduser("~/.plan"),    "plan"), 
             (os.path.expanduser("~/.project"), "project")]

    parse_cli()

    cache_time = getcachetime(cache_file)

    token = gettoken(token_file)
    if token is None:
        print(f"{token_file} not found. Exiting", file=sys.stderr)
        sys.exit(1)
    if token == "":
        print(f"{token_file} is empty. Exiting", file=sys.stderr)
        sys.exit(1)

    error = False
    for f in files:
        if upload_file(f[0], f[1]) != OKCODE:
            print(f"Error uploading {f[0]}", file=sys.stderr)
            error = True

    if not error:
        updatecachetime(cache_file)
    else:
        print(f"Upload errors. Skipping updating {cache_file}", file=sys.stderr)
        sys.exit(1)

