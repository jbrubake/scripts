#!/bin/sh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2021 Jeremy Brubaker <jbru362@gmail.com>
#
# abstract: run 'rclone bisync' with sensible options.
#
# Defaults {{{1
VERBOSE_DFLT=
FILTER_DIR_DFLT=${XDG_CONFIG_HOME:-~/.config}/rclone/filters
SYNC_ROOT_DFLT=${RCLONE_SYNC_ROOT:-$HOME/.sync}

RCLONE_SYNC_OPTIONS='--check-access --resilient --recover --max-lock 2m'

# Documentation {{{1
#
VERSION='1.0'

print_help() {
    [ -n "$2" ] && printf "%s\n" "$2"
    case $1 in
        addcheck) # {{{
    cat <<EOF
Usage: $0 addcheck [REMOTE]
Create rclone 'check-access' file
 
 -h              display this help and exit
EOF
        ;; # }}}
        sync) # {{{
    cat <<EOF
Usage: $0 sync [REMOTE]
Run 'rclone bisync'
 
 -h              display this help and exit
EOF
        ;; # }}}
        resync) # {{{
    cat <<EOF
Usage: $0 [REMOTE]
Run 'rclone bisync --resync'
 
 -y              do not ask for resync confirmation
 -h              display this help and exit
EOF
        ;; # }}}
        *) # {{{
    cat <<EOF
Usage: $0 [OPTION] [COMMAND] [REMOTE] [RCLONE_OPTIONS]

Run 'rclone bisync' with sensible options.

If REMOTE is not specified, COMMAND will be run on all configured remotes.
RCLONE_OPTIONS are passed directly to rclone(1)

Options: 
 -v              explain what is being done
 -V              display version info and exit
 -h              display this help and exit

Commands:
 sync (default)
 resync
 addcheck
EOF
        ;; # }}}
    esac
} >&2

print_version() {
    cat <<EOF
$PROGNAME $VERSION
Copyright (C) 2021 Orion Arts
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Jeremy Brubaker.
EOF
}

# Functions {{{1
#
yesno() {
    printf '%s' "$1" >&2
    read -r r
    [ "$r" != "${r#[Yy]}" ]
}

getfilters() {
    _remote=$1
    _remote_dir=$2
    filter=
    for f in "${_remote%:}-default" "${_remote%:}"; do
        if [ -f "$FILTER_DIR/$f" ]; then
            filter="$filter --filter-from=$FILTER_DIR/$f"
        fi
    done

    echo "$filter"
}

addcheck() {
    _remote=$1; shift
    touch "$SYNC_ROOT/${_remote%:}/RCLONE_TEST"
    rclone copy "$SYNC_ROOT/${_remote%:}/RCLONE_TEST" "$_remote/"
}

resync() {
    _remote=$1; shift
    sync "$_remote" --resync "$@"
}

sync() {
    _remote=$1; shift
    rclone bisync \
        $RCLONE_SYNC_OPTIONS \
        --filter '+ /RCLONE_TEST' \
        $(getfilters "$_remote") \
        "$@" "$_remote" "$SYNC_ROOT/${_remote%:}"
}

# Process options {{{1
#
VERBOSE=$VERBOSE_DFLT
FILTER_DIR=$FILTER_DIR_DFLT
SYNC_ROOT=$SYNC_ROOT_DFLT

# If first arg is --* then do not run getopts
case $1 in --*) ;; *)
    while getopts 'r:f:vVh' opt; do
        case $opt in
            r) SYNC_ROOT=$OPTARG ;;
            f) FILTER_DIR=$OPTARG ;;
            v) VERBOSE=y ;;
            V) print_version; exit ;;
            h|?) print_help; exit ;;
        esac
    done
    shift $((OPTIND - 1)) ;;
esac

case $1 in
    addcheck)
        cmd=$1; shift
        while getopts 'h' c; do
            case $c in
                h) print_help addcheck; exit 0 ;;
            esac
        done
        shift $((OPTIND - 1))
        ;;
    resync)
        cmd=$1; shift
        resync_confirm=
        # If first arg is --* then do not run getopts
        case $1 in --*) ;; *)
            while getopts 'yh' c; do
                case $c in
                    y) resync_confirm=yes ;;
                    h) print_help resync; exit 0 ;;
                esac
            done
            shift $((OPTIND - 1)) ;;
        esac
        if [ -z "$resync_confirm" ]; then
            yesno 'Really run resync? [y/N] ' || exit 0
        fi
        ;;
    sync|*)
        [ "$1" = "sync" ] && shift
        cmd=sync
        # If first arg is --* then do not run getopts
        case $1 in --*) ;; *)
            while getopts 'yh' c; do
                case $c in
                    y) resync_confirm=yes ;;
                    h) print_help sync; exit 0 ;;
                esac
            done
            shift $((OPTIND - 1)) ;;
        esac
        ;;
esac

# Main {{{1
#
if ! getent ahosts www.google.com >/dev/null; then
    printf "%s:      No internet connction. Aborting.\n" "$(date "+%Y-%m-%d %T")" >> "$logfile"
    exit
fi

# Set specific remote if requested
case $1 in
    -*|'') remote=;;
    *) remote=$1; shift ;;
esac

for r in $(rclone listremotes); do
    [ -n "$remote" ] && [ "${remote%:}:" != "$r" ] && continue
    mkdir -p "$SYNC_ROOT/${r%:}"
    $cmd "${r%:}:" "$@"
done

