#!/bin/bash
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2021 Jeremy Brubaker <jbru362@gmail.com>
#
# abstract: present a menu based on commands in a config file
#
set -u
LIBPATH="/usr/lib/dmenu:/usr/local/lib/dmenu:$HOME/lib/dmenu:$(dirname $0)"

oldifs="$IFS"
IFS=:
for d in $LIBPATH; do
    if [ -r "$d/routines.sh" ]; then
        dmenulib="$d/routines.sh"
        break
    fi
done
IFS="$oldifs"

if [ -n "${dmenulib-}" ]; then
    source "$dmenulib"
else
    printf "dmenu shell library not found\n" >&2
    exit 1
fi

# Documentation {{{1
#
VERSION='1.0'

print_help() {
    cat <<END >&2
Usage: $0 [OPTION] [INTERFACE]

Present a menu based on commands in a config file

  -h   	    display this help and exit
  -v        output version information and exit

Menu file format:

[Commands]
cmd1 = <commands>
cmd2 = <commands>

[Config]
prompt = "prompt string"
END
}

print_version() {
    cat <<END >&2
$0 $VERSION
Copyright (C) 2021 Orion Arts
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Jeremy Brubaker.
END
}

# Process options {{{1
#
MENUDIR="${XDG_CONFIG_DIR:-$HOME/.config}/dmenu-menu"

case "${1-}" in
    -h | --help) print_help; exit 0 ;;
         --version) print_version; exit 0 ;;
    -*) printf "Invalid option: %s\n" "$1" >&2; print_help >&2; exit 1 ;;
    '') printf "%s: No menu file given.\n" "$0"; exit 1 ;;
esac

if [ -r "$1" ]; then
    MENUFILE="$1"
elif [ -r "$MENUDIR/$1" ]; then
    MENUFILE="$MENUDIR/$1"
elif [ -r "$MENUDIR/$1.ini" ]; then
    MENUFILE="$MENUDIR/$1.ini"
else
    printf "%s: %s not found.\n" "$0" "$1"
    exit 1
fi
shift

# Get menu list and configure options {{{1
#
section=
choices=
lineno=0
declare -A COMMANDS
while read -r line; do
    lineno=$((lineno + 1))

    # Which section are we in?
    case "${line^^}" in
        \#* | '')                    continue ;;
        \[CONFIG\])   section='cfg'; continue ;;
        \[COMMANDS\]) section='cmd'; continue ;;
    esac

    # Split fields and strip leading/trailing whitespace
    key=$(echo "$line" | cut -d= -f1  | sed 's/^\s*\(.*\)\s*$/\1/')
    val=$(echo "$line" | cut -d= -f2- | sed 's/^\s*\(.*\)\s*$/\1/')

    # Strip surrounding quotes
    # BUG: Does not handle having words at start and end separately quoted
    # BUG: such as 'foo' blah "bar" or "foo" blah "bar"
    case "$val" in
        \'*\' | \"*\")
            val=$(echo "$val" | sed -e 's/^"\(.*\)"$/\1/' -e "s/^'\(.*\)'$/\1/")
            ;;
        \'*\" | \"*\')
            printf "Ignoring quoting error on line %d (%s)\n" "$lineno" "$line" >&2
            continue
            ;;
    esac

    if [ "$section" = "cmd" ]; then
        choices="$choices$key\n"
        COMMANDS[$key]="$val"
    elif [ "$section" = "cfg" ]; then
        case "${key^^}" in
            PROMPT) prompt=$val ;;
        esac
    fi
done < "$MENUFILE"

# Main {{{1
#
choice=$(echo -e "$choices" | dmenu $(make_dmenu_args) -i -p "${prompt-}" -l "${#COMMANDS[*]}" "$@")

if [ -n "$choice" ]; then
    ${COMMANDS[$choice]}
fi

