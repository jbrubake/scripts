#!/bin/sh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2014 Jeremy Brubaker <jbru362@gmail.com>
#
# abstract:	hasty pingsweep script when nmap is not available
#
IPMSK=0xffffffff # 32-bits on
# Documentation {{{1
#
VERSION='2.1'

print_help() {
    cat <<END >&2
Usage: $0 [OPTION] <ip/cidr>

Ping all addresses in a subnet. If the CIDR is ommited, a /24 is assumed.

  -p        ping hosts in parellel
  -C        do not use color
  -h   	    display this help and exit
  -v        output version information and exit
END
}

print_version() {
    cat <<END >&2
$0 $VERSION
Copyright (C) 2014 Orion Arts
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Jeremy Brubaker.
END
}

# Process options {{{1
#
COLOR='[1;32m'
RESET='[0m'
bg='n'
while getopts ':Cphv' c; do
    case $c in
        C) COLOR= ; RESET= ;;
        p) bg='y' ;;
        h) print_help; exit 0 ;;
        v) print_version; exit 0 ;;
        ?) printf "Invalid option: -%s\n" "$OPTARG" >&2; print_help; exit 1 ;;
    esac
done
shift $((OPTIND-1))
OPTIND=1

# Functions {{{1
#
# isip {{{2
#
# @description Check if a string is a valid IP Address
#   Currently support IPv4 only
#
# @arg $1 str String to validate
#
# @exitcode 0 if $1 is a valid IP address
# @exitcode 1 if $1 is not a valid IP address
#
isip() {(
    octet="(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])"
    printf -- %s "$1" | grep -qE "^$octet\.$octet\.$octet\.$octet$"
)}

# iscidr {{{2
#
# @description Check if a string is a valid IPv4 CIDR
#
# @arg $1 str String to validate
#
# @exitcode 0 if $1 is a valid IPv4 CIDR
# @exitcode 1 if $1 is not a valid IPv4 CIDR
#
iscidr() { printf %s "$1" | grep -qE "^([0-9]|[12][0-9]|3[012])$"; }

# dec2ip {{{2
#
# @description Convert a 32-bit decimal number to an IPv address
#
# @arg $1 32-bit integer
#
# @sdout Dotted quad IPv4 address
#
dec2ip() {
    printf '%d.%d.%d.%d' \
        "$(($1 >> 24 & 0xff))" \
        "$(($1 >> 16 & 0xff))" \
        "$(($1 >> 8  & 0xff))" \
        "$(($1 >> 0  & 0xff))"
}

# ip2dec {{{2
#
# @description Convert an IPv4 address to a 32-bit integer
#
# @arg $1 str IPv address
#
# @stdout 32-bit integer
#
ip2dec() {
    s=0
    oldifs=$IFS; IFS=.
    for o in $1; do s=$((s * 256 + o)); done
    IFS=$oldifs
    echo "$s"
}

# cidr2mask {{{2
#
# @description Convert an IPv4 CIDR to a subnet mask
#
# @arg $1 int CIDR
#
# @stdout Subnet mask as a 32-bit integer
#
cidr2mask() { echo $(( 0xffffffff ^ (2 ** (32 - $1) - 1) )); }

# Main {{{1
#
# Extract address and CIDR
ip=$(echo $1 | sed 's@/.*$@@')
cidr=$(echo $1 | sed 's@^.*/@@')
[ "$cidr" = "$ip" ] && cidr=24 # no cidr was passed

# Validate input
if ! isip "$ip" || ! iscidr "$cidr"; then
    printf "%s: invalid network address: '%s'\n" "$0" "$1" >&2
    exit 1
fi

# Print header
if [ "$bg" = 'y' ]; then
    tmpfile=$(mktemp "$(basename "$0").XXXXXX")
    trap 'rm -f "$tmpfile"' EXIT
else
    printf "${COLOR}Beginning pingsweep of %s/%s...${RESET}\n\n" "$ip" "$cidr"
fi

# Ping the network {{{2
#

# Get network address and mask as integers
net=$(ip2dec $ip)
msk=$(cidr2mask "$cidr"")
net=$((net & msk))

# Get the first and last IP on the network
# /31 and /32 are special cases
if [ "$cidr" -eq 32 ]; then
    first=$net
    last=$net
elif [ "$cidr" -eq 31 ]; then
    first=$net
    last=$((net + 1))
else
    first=$((net + 1))
    last=$((net + (IPMSK ^ msk) - 1))
fi

# ^C kills the whole sweep
trap 'exit' INT

# Run the sweep
for host in $(seq "$first" "$last"); do
    if [ "$bg" = 'y' ]; then
        {
            ping -c1 "$host" >/dev/null 2>&1 &&
                printf "%s\n" "$(dec2ip "$host")" >>"$tmpfile"
        } &
    else
        printf "%s..." "$(dec2ip "$host")"
        ping -c1 "$host" >/dev/null 2>&1 &&
            printf "${COLOR}alive${RESET}"
        echo
    fi
done

# Output background scan results {{{2
#
if [ "$bg" = 'y' ]; then
    wait # for all the backgrounded pings

    # Use awk to sort the list of alive IPs because they
    # may be printed in any order due to the backgrounding
    < "$tmpfile" awk '
    /^[^#]/    { alive[$0] = 1 }
    END        { for (h in alive)
                    print h | "sort -t. -k4 -n" }'
fi

