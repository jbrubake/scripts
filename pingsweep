#!/bin/sh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2014 Jeremy Brubaker <jbru362@gmail.com>
#
################################################################################
# file:		pingsweep
# usage:	pingsweep first.three.octets
#		ex. # pingsweep 192.168.1
# abstract:	hasty pingsweep script when nmap is not available
################################################################################

# Documentation {{{1
#
VERSION='1.0'

print_help() {
    cat <<END >&2
Usage: $0 [OPTION] <network address>

Ping all addresses in a /24 network

  -p        ping hosts in parellel and send output to a file
  -h   	    display this help and exit
  -v        output version information and exit
END
}

print_version() {
    cat <<END >&2
$0 $VERSION
Copyright (C) 2014 Orion Arts
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Jeremy Brubaker.
END
}

# Process options {{{1
#
bg='n'
while getopts ':phv' c; do
    case $c in
        p) bg='y' ;;
        h) print_help; exit 0 ;;
        v) print_version; exit 0 ;;
        ?) printf "Invalid option: -%s\n" "$OPTARG" >&2; print_help; exit 1 ;;
    esac
done
shift $((OPTIND-1))

# 4th octet is stripped off
net=$(echo "$1" | sed 's/\(.*\..*\..*\)\..*/\1/')

if ! echo "$net" | grep -E '[0-9]+\.[0-9]+\.[0-9]+' >/dev/null 2>&1; then
    printf "%s: missing network address (x.x.x[.x])\n" "$0" >&2
    print_help
    exit 1
fi

# Print header {{{1
#
if [ "$bg" = 'y' ]; then
    tmpfile=$(mktemp "$(basename "$0").XXXXXX")
    trap 'rm -f "$tmpfile"' EXIT

    printf "# pingsweep of %s.0/24...\n" "$net" >>"$tmpfile"
    printf "# start: %s\n" "$(date)" >>"$tmpfile"
else
    printf "\033[1;32mBeginning pingsweep of %s.0/24...\033[0m\n\n" "$net"
fi

# Ping the network {{{1
#
for host in $(seq 1 254); do
    if [ "$bg" = 'y' ]; then
        {
            if ping -c1 "$net.$host" >/dev/null 2>&1; then
                printf "%s.%s\n" "$net" "$host" >>"$tmpfile"
            fi
        } &
    else
       printf "trying %s.%s..." "$net" "$host"
       if ping -c1 "$net.$host" >/dev/null 2>&1; then
           printf "\033[1;32malive\033[0m"
       fi
       echo
    fi
done

# Output background scan {{{1
#
if [ "$bg" = 'y' ]; then
    wait # for all the backgrounded pings

    # Use awk to sort the list of alive IPs because they may be printed in any
    # order due to the backgrounding
    < "$tmpfile" awk '
    /^# ping/  { header[1] = $0 }
    /^# start/ { header[2] = $0 }
    /^[^#]/    { ips[i] = $0
                 i++ }
    END        { print header[1]
                 print header[2]
                 for (i in ips)
                    print ips[i] | "sort -t. -k4 -n" }'

    printf "# end: %s\n" "$(date)"
fi

