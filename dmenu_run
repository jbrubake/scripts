#!/bin/sh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2021 Jeremy Brubaker <jbru362@gmail.com>
#
# abstract: use dmenu as a run dialog
#
# Requires 'my terimnal' to print terminal command
#

PROGRAM=$(basename $0)
XRDB="$(xrdb -query | grep "$PROGRAM")"

getxres() {
    echo "$XRDB" | awk "/$PROGRAM.*$1/ {print \$2}"
}

make_dmenu_args() {
    font=$(getxres font)
    test -n "$font" && args="-fn $font $args"

    bg=$(getxres background)
    test -n "$bg" && args="-nb $bg $args"

    fg=$(getxres foreground)
    test -n "$fg" && args="-nf $fg $args"

    selbg=$(getxres selbackground)
    test -n "$selbg" && args="-sb $selbg $args"

    selfg=$(getxres selforeground)
    test -n "$selfg" && args="-sf $selfg $args"

    hibg=$(getxres hibackground)  
    test -n "$selfg" && args="-sf $hifg $args"

    hifg=$(getxres hiforeground)  
    test -n "$selfg" && args="-sf $hifg $args"

    hiselbg=$(getxres hiselbackground)
    test -n "$selfg" && args="-sf $hiselfg $args"

    hiselbfg=$(getxres hiselforeground)
    test -n "$selfg" && args="-sf $hiselfg $args"

    outfg=$(getxres outforeground) 
    test -n "$selfg" && args="-sf $outfg $args"

    outbg=$(getxres outbackground)
    test -n "$selfg" && args="-sf $outfg $args"

    echo "$args"
}

term_cmd=$(my -v terminal)

max_history=100
aliasfile="$HOME/.alias"
functionfile="$HOME/.functions"

cachedir="${XDG_CACHE_HOME:-"$HOME/.cache"}/dmenu"
if ! [ -d "$cachedir" ]; then
    mkdir -p "$cachedir"
fi
cachefile="$cachedir/run"

# Instead of making this an interactive script, just
# source the files we need
test -r "$aliasfile"    && source $aliasfile 2>/dev/null
test -r "$functionfile" && source $functionfile 2>/dev/null

(compgen -a; compgen -c | grep -vxF -- "$(compgen -a)") \
    | sort | grep -v "^[[:punct:]]" | uniq > "$cachefile"

cmdline=$(dmenu $(make_dmenu_args) "$@" < "$cachefile")
test -z "$cmdline" && exit

cmd=$(echo "$cmdline" | cut -d' ' -f1)
if test -n "$cmd" && grep "${cmd/;/}" "$cachefile" 2>&1 >/dev/null; then
    # Trailing ';' means run it in a terminal
    case "$cmdline" in
        *\;) interm='y' ;;
        *)   interm='n' ;;
    esac

    if test "$interm" == 'y'; then
        $term_cmd -- bash -ic "
        __t=\$(date +%s)
        $cmdline
        test \$((\$(date +%s) - __t)) -lt 1 &&
            read -srn1 -p 'Press any key...'
        "
    else
        (eval $cmdline &)
    fi
else
    exec "$0" "$@" -p "${cmd/;/} not found:"  < "$cachefile"
fi

