#!/bin/sh
#
# Depends on 'chooser terimnal' to print terminal command

term_cmd=$(chooser -V terminal)

max_history=100
aliasfile="$HOME/.alias"
functionfile="$HOME/.functions"

cachedir="${XDG_CACHE_HOME:-"$HOME/.cache"}/dmenu"
if ! [ -d "$cachedir" ]; then
    mkdir -p "$cachedir"
fi
cachefile="$cachedir/run"

# Instead of making this an interactive script, just
# source the files we need
test -r "$aliasfile"    && source $aliasfile 2>/dev/null
test -r "$functionfile" && source $functionfile 2>/dev/null

(compgen -a; compgen -c | grep -vxF -- "$(compgen -a)") \
    | sort | grep -v "^[[:punct:]]" | uniq > "$cachefile"

cmdline=$(dmenu "$@" < "$cachefile")
test -z "$cmdline" && exit

cmd=$(echo "$cmdline" | cut -d' ' -f1)
if test -n "$cmd" && grep "${cmd/;/}" "$cachefile" 2>&1 >/dev/null; then
    # Trailing ';' means run it in a terminal
    case "$cmdline" in
        *\;) interm='y' ;;
        *)   interm='n' ;;
    esac

    # TODO: Add support for more terminals
    if test "$interm" == 'y'; then
        $term_cmd -- bash -ic "
        __t=\$(date +%s)
        $cmdline
        test \$((\$(date +%s) - __t)) -lt 1 &&
            read -srn1 -p 'Press any key...'
        "
    else
        eval $cmdline
    fi
else
    exec "$0" "$@" -p "${cmd/;/} not found:"  < "$cachefile"
fi
