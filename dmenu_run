#!/bin/sh
#
# Depends on 'chooser terimnal' to print terminal command

term_cmd=$(chooser terminal)

max_history=100
aliasfile="$HOME/.alias"
functionfile="$HOME/.functions"

cachedir="${XDG_CACHE_HOME:-"$HOME/.cache"}/dmenu"
if ! [ -d "$cachedir" ]; then
    mkdir -p "$cachedir"
fi
cachefile="$cachedir/run"

# Instead of making this an interactive script, just
# source the files we need
test -r "$aliasfile"    && source $aliasfile
test -r "$functionfile" && source $functionfile

(compgen -a; compgen -c | grep -vxF -- "$(compgen -a)") \
    | sort | grep -v "^[[:punct:]]" | uniq > "$cachefile"
cmd=$(dmenu "$@" < "$cachefile")

if test -n "$cmd" && grep ${cmd/;/} "$cachefile" 2>&1 >/dev/null; then
    # Strip trailing ';' but run it in a terminal
    case "$cmd" in
        *\;) interm='y'; cmd=${cmd/;/} ;;
        *)   interm='n' ;;
    esac

    # Use alias if it exists
    cmdexec=$(alias | grep "$cmd=" | cut -f2 -d "'" | tr -d "'")

    # Otherwise it is a command or function
    if [ -z "$cmdexec" ]; then
        cmdexec="$cmd"
    fi

    # TODO: Add support for more terminals
    if test "$interm" == 'y'; then
        sh -c "$term_cmd -- bash -c '$cmdexec; exec bash -i'"
    else
        $cmd
    fi
fi
