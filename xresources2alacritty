#!/usr/bin/python

# Convert an alacrity config file to support Xresources color scheme
#
# Based on https://github.com/MuntashirAkon/dotfiles/blob/master/.local/bin/alacritty_xr_color_scheme

import os
from pathlib import Path
import subprocess
import yaml

input  = "alacritty.yml.in"
output = Path(input).stem

if "XDG_CONFIG_HOME" in os.environ and os.path.isfile(Path(os.environ["XDG_CONFIG_HOME"]) / "alacritty" / input):
    input  = Path(os.environ["XDG_CONFIG_HOME"]) / "alacritty" / input
    output = Path(os.environ["XDG_CONFIG_HOME"]) / "alacritty" / output
elif os.path.isfile(Path(os.environ["HOME"]) / ".config/alacritty" / input):
    input  = Path(os.environ["HOME"]) / ".config/alacritty" / input
    output = Path(os.environ["HOME"]) / ".config/alacritty" / output
elif os.path.isfile(Path(os.environ["HOME"]) / ".alacritty.yml.in"):
    input  = Path(os.environ["HOME"]) / f".{input}"
    output = Path(os.environ["HOME"]) / f".{output}"
else:
    print(f"{input} not found")
    exit(1)

def getresource(resource):
    return subprocess.Popen(['xrdb', '-get', resource.encode('utf-8')], \
            stdout=subprocess.PIPE).communicate()[0].decode("utf-8").strip('\n')

# Map Xresources to alacritty configuration
#
xresources = {
    "colors": {
        "primary": {
            "background": getresource('background'),
            "foreground": getresource('foreground'),
        },
        "normal": {
            "black":   getresource('color0'),
            "red":     getresource('color1'),
            "green":   getresource('color2'),
            "yellow":  getresource('color3'),
            "blue":    getresource('color4'),
            "magenta": getresource('color5'),
            "cyan":    getresource('color6'),
            "white":   getresource('color7'),
        },
        "bright": {
            "black":   getresource('color8'),
            "red":     getresource('color9'),
            "green":   getresource('color10'),
            "yellow":  getresource('color11'),
            "blue":    getresource('color12'),
            "magenta": getresource('color13'),
            "cyan":    getresource('color14'),
            "white":   getresource('color15'),
        },
        "cursor": {
            "text":   getresource('background'), 
            "cursor": getresource('cursorColor'), 
        },
        "vi_mode_cursor": {
            "text":   getresource('alacritty.vi_mode_cursor.text'), 
            "cursor": getresource('alacritty.vi_mode_cursor.cursor'), 
        },
    },
    "font": { # *font: <family>:size=<size>
        "normal": {
            "family": getresource('alacritty.font').split(':')[0],
        },
        "size": int(getresource('alacritty.font').split(':size=')[1]),
    },
}

def merge_dicts(d1, d2):
    """ values in d2 override d1 """

    # Loop through all items in d2
    for k, v in d2.items():
        # Is it a sub-dictionary?
        if isinstance(v, dict):
            # If it doesn't exist in d1, create it
            if not k in d1:
                d1[k] = {}
            # Recurse
            merge_dicts(d1[k], v)
        # It is just a value and is not empty
        elif v:
            # d2 overrides d1
            d1[k] = v
        # Skip empty values
        else:
            pass

with open(input) as f:
    config = yaml.load(f, yaml.FullLoader) or {}
    merge_dicts(config, xresources)
    with open(output, "w") as f:
        yaml.dump(config, f)

