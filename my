#!/bin/sh

MY_DIR=$HOME/etc/my

PROGNAME=$(basename $0)
case "$1" in
    -v)
        v='y'
        shift
        ;;
    -d)
        shift
        if ! test -d "$1"; then
            printf "%s: not a directory\n", "$1" >&2
            return 2>/dev/null || exit
        fi
        MY_DIR="$1"
        shift
        ;;
    -h)
        cat <<EOF
$PROGNAME: $PROGNAME [-dv] category [arg ...]
    Execute the correct command from a list of alternatives or display
    information about commands.

    Options:
      -d dir    look for alternatives lists in DIR (default: $MY_DIR)
      -v        print the selected command

    Exit Status:
    Returns exit status of COMMAND, or failure if COMMAND is not found.

    Alternative list format:

    Each file should be named <category> and contain one entry per line.  Each
    entry is the command to be executed. An optional tag 'X' may follow,
    separated by a comma. Entries tagged thus, will be ignored if \$DISPLAY is
    not defined.

    Example:
        # browser
        firefox,X
        chrome,X
        links
        lynx
EOF
        return 2>/dev/null || exit
        ;;
    -*)
        printf "%s: %s: invalid option\n" "$PROGNAME" "$1" >&2
        return 2>/dev/null || exit
        ;; 
esac

f="$MY_DIR/$1"
if ! test -r "$f"; then
    printf "Category '%s' not found\n" "$1" >&2
    return 2>/dev/null || exit
fi
shift

while IFS=',' read cmd tag; do
    if test "$tag" == "X" && test -z "$DISPLAY"; then
        continue
    fi
    if command -v 2>&1 >/dev/null $c; then
        break
    fi
done < $f

if test -z "$cmd"; then
    printf "No alternative found for 'category' %s\n" $1 >&2
fi

if test "$v" == "y"; then
    echo $cmd
else
    if test "$tag" == "X"; then
        (exec $cmd "$@" &)
    else
        $cmd "$@"
    fi
fi

return 2>/dev/null || exit
